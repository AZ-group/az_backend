# TODO

- Deseos y promesas

- Definir DB !!!

- [ Bug? ] Supuesta inconcistencia al ver registros como "guest" con $guest_access = true ya que se muestran en listado pero luego no dejan accederse individualmente *aunque* parece ser que por diseño se exige que individualmente cada registro tenga guest_access = 1

Pasa lo mismo con los archivos ya que el DownloadController solo deja descargar archivos con guest_access = 1

=> depredicar guest_access !!!!

- Generar Modelos, Controladores y APIs via comando (sin sobre-escribir existente excepto que se especifique y posiblemente se confimre) basado en plantillas. ***

- DotEnv

- Id opcionalmente no autoincrementales por seguridad !

- Enviar efectivamente correos -prioridad alta-

- Correos con formato. <-- ver como es en Laravel que usa un motor de plantillas.

- [ Bug ]  [ Seguridad ] NO debería poder crear una colección de registros que no me pertenecen sino soy Admin o tengo los permisos correspondientes !!!

- No deberían poder crearse dos colecciones iguales (mismos registros, misma tabla)

- En app/libs/Factory.php está mal que en check() se haga referencia a una versión concreta de AuthController ya que está dentro de una librería que no está versionada.

- Dejar tablas de prueba con nombres como foo y bar.

- Generar algún tipo de alerta / warning si en producción el access token estuviera configurado para durar más de 1500 minutos  (poco más de un día). El generar tokens con vencimiento alto sería un problema enorme que obligaría a lidiar con unalista negra.

- Generar una alerta si aumenta el número de usuarios con el rol de "admin". 

- Soft-delete para archivos?

- Testear de nuevo los permisos que decoran los roles ! 

- Cambios en las tablas del ACL:

  - La tabla permissions debería llamarse resource_permissions

  - Los 'roles' deberían ser una tabla en la DB

  - Debería crearse una tabla 'role_permissions' en vez de seguir manteniendo los permisos para cada rol en el archivo .php de de cada api.

  <-- la tabla 'roles' y 'role_permissions' deberían compilarse de alguna forma y ser incluidos dentro del payload del access_token para evitar andar leyéndolas cada vez. ¿O sera que con REDIS lo soluciono realmente?


- Conceptos:

  - Los campos hidden deberían de serlo solo para otros usuarios excepto si mismo y un admin. Así se pueden proteger datos sensibles en una cuenta de usuario por ejemplo. Quizás se podría hacer si el campo hidden aceptara un callback que chequera !$owned && !$this->is_admin .... en todo caso el unset() se hace en toSql() dentro de Model.

  - Se podría aplicar un OutputMutator (o un transformer) sobre los campos password y los de una tarjeta de crédito conviertiendo estos en algo como "******" y "1050-xxxxxxxxxxx" respectivamente con lo cual se protege la información sin ocultarla completamente.

  - NO deben almacenarse ni roles ni permisos en los refresh_tokens por seguridad. Un refresh_token solo debe servir para ser autenticación y no para autorización.  -- OK

  - No sería necesario invalidar tokens. Con solo chequear si el usuario que presenta sus credenciales ya sea en el login o al renovar el token tiene autorización es suficiente. Como mucho se está dejando una ventana abierta de oportunidad para hacer daño lo que quede de vida al access_token.


- En /api/v1/img_resize/#id
  ?height=300
  ?width=500
  ?size=500x300
  &ellipse 

Sacar ideas de 
https://imageresizer.io/demo#resize
https://kraken.io/docs/image-resizing


- Implementar WebHooks (reverse APIs) via /api/v1/hooks  Con un request te suscribes enviando una url de notificación y cuando ocurre el evento de cambio en un recurso que se está escuchando, sos notificado a esa url.

The REST Hook subscriptions are created, updated, and deleted using a REST API

https://restful.io/webhooks-dos-and-dont-s-what-we-learned-after-integrating-100-apis-d567405a3671
https://www.olioapps.com/blog/rest-hooks/
https://nordicapis.com/stop-polling-and-consider-using-rest-hooks/

<-- no utiliza WebSockets sino es una alternativa a ellos.

Creación: 

POST  \
    -H Authenticated: authenticationSolution \
    -H Content-Type: application/json \
    -d ‘{"target_url": "https://hooks.zapier.com/hooktest",
        "Event": "user_created"}’

Eliminación del hook:

DELETE  \
    -H Authenticated: authenticationSolution \
    -H Content-Type: application/json \


- Investigar API de Claro que tiene hasta relaciones polimorficas mostradas como "atributos"
https://csapi.dev.claroshop.com/app/v1/product?page_size=5

- Corregir JSON en /v1/files

"failures": [
            "",
            ""
]

<-- no está vacio ! debería incluir nombre_archivo : error  

- Incluir el nombre del proyecto en un salt sobre las secret keys para evitar que un token generado en un proyecto funcione en otro con las mismas secret keys. O sea aplicar una secret_key = fn(secret_key, nombre_proyecto)

- Hook afterRegister() AuthController ? uso posible enviar un correo de confirmación

- Hook afterCreate() para la API Rest ?

- Middleware ejecutado después de una API podría servir para hacer los thumbnails de imágenes. Tocaría registrar el Middleware posiblemente en la propia API al final del construtor. 

- Middleware podría tener la funcionalidad de envio de enlace para verificación de correo luego de hacer el registro.


- Id opcionalmente no autoincrementales por seguridad !

- Enviar efectivamente correos -prioridad alta-

- Correos con formato. <-- ver como es en Laravel que usa un motor de plantillas.

- En /api/v1/auth/rememberme no debe devolverse el enlace (solo útil para fines de debug) sino que debe enviarse un correo electrónico. <-- arreglar!

{
    "data": {
        "link_sent": "http://simplerest.lan//auth/change_pass_by_link/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImlhdCI6MTU5OTg2NDAyNSwiZXhwIjoxNjAwNDY4ODI1LCJpcCI6IjEyNy4wLjAuMSIsInJvbGVzIjpbInJlZ3VsYXIiXSwicGVybWlzc2lvbnMiOnsicHJvZHVjdHMiOjcsImZvbyI6N30sInVpZCI6IjE2OCIsImNvbmZpcm1lZF9lbWFpbCI6IjAifQ.qaZncsDyQKp8KKt7zP25-tE09ANOs7Qpx3_Wjd6venM/1600468825"
    },
    "status_code": 200,
    "error": "",
    "error_detail": ""
}

- En /api/v1/auth/register tampoco debe devolverse el enlace  <-- *enviar* el correo y la parte siguiente quitarla de la respuesta:

"email_confirmation_link": "http://simplerest.lan//auth/confirm_email/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImlhdCI6MTU5OTg2NjQ5NSwiZXhwIjoxNjAwNDcxMjk1LCJpcCI6IjEyNy4wLjAuMSIsImVtYWlsIjoiemFyYUBnbWFpbC5jb20ifQ.mCZTE-36xnbmjC8gzLN-OWFbR5RwzB05-eJ_6rWsNSQ/1600471295"

- Debe ser posible *volver* a solicitar un correo con el enlace de confirmación de correo (obviamente se exige que el usuario esté registrado y haya entregado un access token válido)

- El TrashCan al paginar no está mostrando (falta)

        "total": XXX,
        "count": XXX,
        "currentPage": XXX,
        "totalPages": XXX,

- Redis con API Rest ?

- Implementar notificaciones push o reverse API.

- Usar Midlewares para evitar tener que hardcodear la clase Auth

https://www.sourcefuse.com/blog/rest-api-best-practices/

- Considerar utlizar fastcgi_finish_request (requiere módulo FPM de Apache o similar para NGINX)

https://maslosoft.com/kb/how-to-continue-script-execution-in-background-in-php/


- Investigar sobre PDO::FETCH_LAZY que puede ahorrar mucha memoria
https://phpdelusions.net/pdo/fetch_modes

- Leer sobre "long running jobs"

https://farazdagi.com/2014/rest-and-long-running-jobs/
https://stackoverflow.com/a/5044619/980631

Podria complementar con HATEOAS 

https://restfulapi.net/hateoas/
https://en.wikipedia.org/wiki/HATEOAS


- Implementar búsquedas complejas como en Magento

https://devdocs.magento.com/guides/v2.3/rest/performing-searches.html


- Proveer en el modelo un método para ejecutar raw queries como en Laravel o CI

https://fideloper.com/laravel-raw-queries


- Modificar Request::header() para que obtenga de forma "case-insensitive" los headers de apache_request_headers()

Convertir a minúsculas como hace NodeJs.

https://stackoverflow.com/questions/5258977/are-http-headers-case-sensitive

- En el config.php colocar:

'JWT_AUTH_CORS_ENABLE' => true


- Incluir sub-Resources, ej:

/api/v1/users?include=rol

protected $availableIncludes = [
      'role'
];

public function includeRole(User $user)
{
      return $this->item($user->role, App::make(RoleTransformer::class));
}

When including a sub-resource, we can nest relations by using the a dot notation. Let’s say every role has a list of permissions stored in a separate table and we wanted to list users with their role and permissions. We can do it like this: include=role.permissions.

Sometimes, we are required to include some necessary relations by default, like an address relation for example. We can do that by using the $defaultIncludes property inside the transformer:

protected $defaultIncludes = [
        'address'
];

Los include parameters se pueden parametrizar (o sea pueden aceptar parámetros), ej:

public function includeUsers(Role $role, ParamBag $paramBag)
{
    list($orderCol, $orderBy) = $paramBag->get('order') ?: ['created_at', 'desc'];

    $users = $role->users()->orderBy($orderCol, $orderBy)->get();

    return $this->collection($users, App::make(UserTransformer::class));
}


Leer en detalle:
https://www.sitepoint.com/php-fractal-make-your-apis-json-pretty-always/


- Usar métodos encadenados para simplificar la creación de reglas que actualmente se hace escribiendo directamente el array $rules en el modelo.

protected $rules = [
        'fullname' 	  => ['min'=>3, 'max'=>40],
        'username'	  => ['min'=>2, 'max'=>15, 'type' => 'regex:/^[a-zA-Z0-9_]+$/'], 
		    'email'     	=> ['type'=>'email'],
               
]

Podría en su lugar......

function __construct(){
  // ..

  $this->rules = new Validator()
                  ->field('fullname)->min(3)->max(40)->string()
                  ->field('username')->min(2)->max(50)->regex('/^[a-zA-Z0-9_]+$/')
                  ->field('email')->email()
                  ...
                  ->getRules();
}

Obviamente que los tipos string e int siguen siendo opcionales si ya están definidos en el SCHEMA.

 Usar un campo folder_id en cada tabla en la que pretendo utilizar folders y usar éste en vez de la combinación entre el user_ud y el nombre del "workspace" como identificador de carpeta.

Objetivo: poder crear recursos de nuestra propiedad en carpetas ajenas donde lógicamente poseemos permisos de lectura y escritura.

- Chequear:

SI está en un folder y no es de mi propiedad ni soy el admin ni tengo permiso de escritura =>
NO debebería poder restaurar el registro.***

- Revisar implementación de first() y hacer findOrFail() y firstOrFail()

Más
https://stackoverflow.com/a/33027466/980631

- Documentar en Git como en 

https://github.com/robsonvn/laravel-couchdb

- Permitir setear nivel de compresion (1 a 6)

	ini_set('zlib.output_compression_level', 4);


- Subconsultas:

  > En el SELECT 
  > En el FROM -> funciona pero no acepta parámetros para la subconsulta y la forma de ver la consulta es mediante getLastPrecompiledQuery() ya que getQueryLog() queda apuntando a la consulta "hija".
  > En el WHERE -> ok
  > En el HAVING 

  > UNION > funciona pero getQueryLog() no muestra los bindings de la subconsulta

Subconsultas en el SELECT puede implementarse con selectRaw() y en el HAVING con havingRaw()

Leer
https://www.tutorialesprogramacionya.com/sqlserverya/temarios/descripcion.php?inicio=75&cod=98&punto=92
https://docs.aws.amazon.com/es_es/redshift/latest/dg/r_Subquery_examples.html
https://www.mundoracle.com/subconsultas.html?Pg=sql_plsql_6.htm
  
- Generador de modelos, controladores y apis (resource controllers) como en Laravel:

Ejemplo:

  php index.php make -mca Products

-m model
-c controller 
-a api controller

https://stackoverflow.com/questions/43187735/laravel-5-4-create-model-controller-and-migration-in-single-artisan-command


- Usar archivos .env 

  'mysql' => [
      'driver'    => 'mysql',
      'host'      => env('DB_HOST', 'localhost'),
      'database'  => env('DB_DATABASE', 'forge'),
      'username'  => env('DB_USERNAME', 'forge'),
      'password'  => env('DB_PASSWORD', ''),
      'charset'   => 'utf8',
      'collation' => 'utf8_unicode_ci',
      'prefix'    => '',
      'strict'    => false,
  ],

Más
https://scotch.io/tutorials/understanding-laravel-environment-variables
https://medium.com/@hfally/how-to-create-an-environment-variable-file-like-laravel-symphonys-env-37c20fc23e72
https://laravel.com/docs/5.7/configuration
https://medium.com/@sagarmaheshwary31/laravel-5-8-from-scratch-config-env-migrations-and-todos-crud-7c771bcac802
https://github.com/vlucas/phpdotenv

- Implementar un paginador con enlaces a nivel de API Rest como:

https://laravel.com/docs/5.8/pagination


- Implementar "where anidados" como en Laravel con callbacks

https://stackoverflow.com/a/25129805/980631

- Debe haber orJoin() como orWhere() y orHaving() 

https://stackoverflow.com/a/36074909/980631
https://laravel.com/docs/5.8/queries#where-exists-clauses


- Considerar usar 'seek method' en vez de OFFSET como método de optimización de queries

Ejemplo (API de Facebook)

"paging": {
"cursors": {
  "after": "MTAxNTExOTQ1MjAwNzI5NDE=",
  "before": "NDMyNzQyODI3OTQw"
},
"previous": "https://graph.facebook.com/me/albums?limit=25&before=NDMyNzQyODI3OTQw"
"next": "https://graph.facebook.com/me/albums?limit=25&after=MTAxNTExOTQ1MjAwNzI5NDE="
}

https://blog.octo.com/design-a-rest-api/  # -> Paging
https://www.eversql.com/faster-pagination-in-mysql-why-order-by-with-limit-and-offset-is-slow/

- Máscara de campos y valores accesibles por un usuario según su rol o... hidden y filled con roles 
a nivel de API

protected $hidden = [
                      'password',
                      'active' => ['guest', 'basic'] 
]

- Restricción de valores 

// UserRole
protected $constraint = [
                      'role_id' => [
                                      'gerente' => [1, 2, 3]
                                   ] 
];

<-- de los roles autorizados a acceder a UserRole el gerente posee una restricción que le permite solo crear o actualizar roles dentro del conjunto [1,2,3] no pudiendo así por ejemplo otorgar un permiso de admin (100)

Justificación: un caso de uso sería que un usuario con rol de gerente por ejemplo otorgar roles a usuarios pero nunca pueda ser un rol igual o superior al de gerente. La solución es restringir los valores que puede tomar el rol_id  

- No tiene sentido que un usuario pueda registrarse sin correo *excepto* venga de Facebook en cuyo caso me guardo el fb_id

- Arreglar lo que pasa si un usuario es borrado con soft delete (warnings)

- Posiblemente implementar "Seek pagination" como en Instagram

{
    ...
    "pagination": {
        "next_url": "https://api.instagram.com/v1/self/media/recent?access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d&max_id=13872296",
        "next_max_id": "13872296"
    }
}

Más
https://nordicapis.com/everything-you-need-to-know-about-api-pagination/
https://www.moesif.com/blog/technical/api-design/REST-API-Design-Filtering-Sorting-and-Pagination/#


- El framework podría migrarse a Phalcon

https://www.toptal.com/phalcon/phalcon-php-restful-apis


- Ante una excepción del modelo imprimir la consulta SQL

- Generar fallos intencionalmente en las URLs para ver si se puede mejorar el reporte de errores (hacerlos más comprensibles)

- Pruebas unitarias

ver 
https://api.akeneo.com/documentation/filter.html
https://www.ibm.com/support/knowledgecenter/fi/SS42VS_7.2.6/com.ibm.qradar.doc/c_rest_api_filtering.html
http://lj.platformatyourservice.com/wiki/REST_API:Filter_Expressions_in_REST_APIs
https://www.ibm.com/support/knowledgecenter/en/SS6KJL_8.6.4/FEB/ref_data_rest_api_list_filter.html


- 'OR' operator

  /api/people?q={{"$or": [{"name": "Jane"}, {"name": "Donald"}]}}

Más
https://restdb.io/docs/querying-with-the-api

- Traer colecciones de recursos relacioandos

  GET  /customers/5/orders

<-- lista de órdenes de compra para el cliente con id=5

o...

  GET /customers/1/orders/99/products

<-- productos de la orden 99 del cliente 1


- ACL, eventos beforeCheckAccess y afterCheckAccess ?

https://docs.phalcon.io/3.4/en/acl

- Implementar X-Rate-Limit-Limit, X-Rate-Limit-Remaining y X-Rate-Limit-Reset

Se deben poder especificar para cada endpoint

https://github.com/dingo/api/wiki/Rate-Limiting
https://developer.twitter.com/en/docs/basics/rate-limiting
https://stackoverflow.com/questions/16022624/examples-of-http-api-rate-limiting-http-response-headers
https://apisyouwonthate.com/blog/what-is-api-rate-limiting-all-about
https://developer.github.com/v3/rate_limit/
https://developer.vimeo.com/guidelines/rate-limiting
https://support.exactonline.com/community/s/knowledge-base#All-All-HNO-Simulation-gen-apilimits
https://stackoverflow.com/a/49611482/980631

- Swagger for Documentation

Swagger is a widely-used tool to document REST APIs that provides a way to explore the use of a specific API, therefore allowing developers to understand the underlying semantic behavior. It’s a declarative way of adding documentation using annotations which further generates a JSON describing APIs and their usage.

- Al generar los modelos..... opcionalmente modificar la tabla correspondiente agregando el campo `deleted_at` y `belongs_to` 

- Ofrecer la forma de filtrado compatible con JSON:API

GET /employees?filter[state]=internal&filter[title]=senior
GET /employees?filter[id]=1,2

equivalente a...

GET /employees?state=internal&title=senior
GET /employees?id=1,2

- En vez de devolver solo un mensaje de error y un status, ofrecer tambien un código de error

// 400 Bad Request
{
  "errors": [
    {
      "status": 400,
      "detail": "Invalid state. Valid values are 'internal' or 'external'",
      "code": 352,
      "links": {
        "about": "http://www.domain.com/rest/errorcode/352"
      }
    }
  ]
}

Más 
https://jsonapi.org/format/#error-objects
https://phauer.com/2015/restful-api-design-best-practices/


- Soportar formatos JSON, XML,  YAML, CSV ...

HTTP/1.1 200 OK
Content-Type: application/xml
Content-Length: ...

<?xml version="1.0"?>
<account>
    <account_number>12345</account_number>
    <balance currency="usd">100.00</balance>
    <link rel="deposit" href="/accounts/12345/deposit" />
    <link rel="withdraw" href="/accounts/12345/withdraw" /> 
    <link rel="transfer" href="/accounts/12345/transfer" />
    <link rel="close" href="/accounts/12345/close" />
</account>
 
- Simplificar la forma de crear la conexion a la DB como en Laravel Lummen:
https://lumen.laravel.com/docs/6.x/database

- Generar Modelos con sus schemas a partir de la DB como con CRUDO usando un comando.

- Migrations, seeders,...

- Sanitización a nivel de urls, FILTER_SANITIZE_URL

https://www.w3schools.com/php/php_filter.asp

- Sanitización a nivel de base de datos

- Upload de archivos, devolver:

{
  "id": "20301",
  "url": "http://simplerest.lan/api/attachments/:user_id/xxxxxxxxxxxxxxxx.png"   
}


- Aceptar distintos "Accept" y "Content-type" y responder acordemente

- Sacar ideas de: https://dev.targetprocess.com/docs/custom-calculations

* "additional details embedded"
* Overriding the HTTP method
* Rate limiting (quotas)
* Errors

- Securitizar almacenamiento de tokens -- en cookies?

https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage
https://medium.com/@jcbaey/authentication-in-spa-reactjs-and-vuejs-the-right-way-e4a9ac5cd9a3
https://dev.to/rdegges/please-stop-using-local-storage-1i04


- Donde almacenar con seguridad Refresh tokens !!!!!

https://stackoverflow.com/questions/48690373/where-to-store-refresh-token-safely
https://github.com/IdentityServer/IdentityServer3/issues/2039

- Custom Actions (Nested Resources)


- Leer atentamente
https://blog.octo.com/design-a-rest-api/
https://docs.microsoft.com/es-es/azure/architecture/best-practices/api-design  !!!
https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api
https://phauer.com/2015/restful-api-design-best-practices/
https://www.paradigmadigital.com/dev/oauth-2-0-equilibrio-y-usabilidad-en-la-securizacion-de-apis/
https://medium.com/crowdbotics/how-to-write-an-api-in-3-lines-of-code-with-django-rest-framework-59b0971edfa4
https://idratherbewriting.com/learnapidoc/pubapis_openapi_tutorial_overview.html
https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md
https://hackernoon.com/designing-rest-api-with-open-api-specification-oas-v2-0-v3-0-using-swagger-11dd4ef8cea6

- Revisar 

https://stackoverflow.com/questions/36514344/how-to-make-use-of-session-in-rest-api/36515140

- Incluir displayName y username en el Payload:

{
    "iss": "stackoverflow",
    "sub": "joe",
    "aud": ["all"],
    "iat": 1300819370,
    "exp": 1300819380,
    "jti": "3F2504E0-4F89-11D3-9A0C-0305E82C3301"
    "context": {
        "user": {
            "key": "joe",
            "displayName": "Joe Smith"
        },
        "roles":["admin","finaluser"]
    }
}

iss (issuer): identifies the principal that issued the JWT.
sub (subject): identifies the principal that is the subject of the JWT. Must be unique
aud (audience): identifies the recipients that the JWT is intended for (array of strings/uri)
exp (expiration time): identifies the expiration time (UTC Unix) after which you must no longer accept this token. It should be after the issued-at time.
nbf(not before): identifies the UTC Unix time before which the JWT must not be accepted
iat (issued at): identifies the UTC Unix time at which the JWT was issued
jti (JWT ID): provides a unique identifier for the JWT.

https://stackoverflow.com/questions/38897514/what-to-store-in-a-jwt